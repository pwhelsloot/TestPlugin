<#

var types = new[] {
  typeof(char),
  typeof(sbyte),
  typeof(byte),
  typeof(short),
  typeof(ushort),
  typeof(int),
  typeof(uint),
  typeof(long),
  typeof(ulong),
};

#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AMCS.Elemos.EntityValidation.Rules
{
  partial class Cast
  {
    private static Dictionary<Type, Cast> BuildCasts()
    {
      var casts = new Dictionary<Type, Cast>();

<# foreach (var type in types) { #>
      casts.Add(typeof(<#= type.Name #>), new <#= type.Name #>Cast());
<# } #>

      return casts;
    }
<# foreach (var type in types) { #>

    private class <#= type.Name #>Cast : Cast
    {
      public override Type ReturnType => typeof(<#= type.Name #>);

      public override object GetValue(object value)
      {
        if (value == null)
          return null;

        return (<#= type.Name #>)value;
      }
    }
<# } #>
  }
}
