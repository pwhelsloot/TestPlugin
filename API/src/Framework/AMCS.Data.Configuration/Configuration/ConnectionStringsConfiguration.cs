//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable CS1591

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace AMCS.Data
{
  public interface IConnectionStringsConfiguration
  {
    IEnumerable<IConnectionStringConfiguration> GetConnectionStrings();
  }

#if NETFRAMEWORK 

  public class ConnectionStringsConfigurationSection : ConfigurationSection, IConnectionStringsConfiguration
  {
    [ConfigurationProperty("", Options = ConfigurationPropertyOptions.IsDefaultCollection)]
    public ConnectionStringElementCollection ConnectionStrings
    {
      get => (ConnectionStringElementCollection)this[string.Empty];
      set => this[string.Empty] = value;
    }

    IEnumerable<IConnectionStringConfiguration> IConnectionStringsConfiguration.GetConnectionStrings()
    {
      return ConnectionStrings?.Cast<ConnectionStringElement>() ?? Enumerable.Empty<ConnectionStringElement>();
    }

  }

#else

  public class ConnectionStringsConfigurationSection : IConnectionStringsConfiguration
  { 
    public IList<ConnectionStringElement> ConnectionStrings { get; }

    IEnumerable<IConnectionStringConfiguration> IConnectionStringsConfiguration.GetConnectionStrings()
    {
      return ConnectionStrings;
    }

    public ConnectionStringsConfigurationSection (XElement element)
    {
      ConnectionStrings = element != null
        ? new ReadOnlyCollection<ConnectionStringElement>(element.Elements("add").Select(x => new ConnectionStringElement(x)).ToList())
        : (IList<ConnectionStringElement>)new ConnectionStringElement[0];
    }
  }

#endif

#if NETFRAMEWORK

  public class ConnectionStringElementCollection : ConfigurationElementCollection
  {
    protected override ConfigurationElement CreateNewElement()
    {
      return new ConnectionStringElement();
    }

    protected override object GetElementKey(ConfigurationElement element)
    {
      return ((ConnectionStringElement)element).Name;
    }
  }
    
# endif

  public interface IConnectionStringConfiguration
  {
    string Name { get; }

    string ConnectionString { get; }

    string ProviderName { get; }

  }

#if NETFRAMEWORK 

  public class ConnectionStringElement : ConfigurationElement, IConnectionStringConfiguration
  {
    [ConfigurationProperty("name", IsKey = true, IsRequired = true)]
    public string Name
    {
      get => (string)this["name"];
      set => this["name"] = value;
    }

    [ConfigurationProperty("connectionString", IsRequired = true)]
    public string ConnectionString
    {
      get => (string)this["connectionString"];
      set => this["connectionString"] = value;
    }

    [ConfigurationProperty("providerName")]
    public string ProviderName
    {
      get => (string)this["providerName"];
      set => this["providerName"] = value;
    }

  }

#else

  public class ConnectionStringElement : IConnectionStringConfiguration
  { 
    public string Name { get; }

    public string ConnectionString { get; }

    public string ProviderName { get; }

    public ConnectionStringElement (XElement element)
    {
      Name = element?.Attribute("name")?.Value != null ? element.Attribute("name").Value : default(string);
      ConnectionString = element?.Attribute("connectionString")?.Value != null ? element.Attribute("connectionString").Value : default(string);
      ProviderName = element?.Attribute("providerName")?.Value != null ? element.Attribute("providerName").Value : default(string);
    }
  }

#endif

}
