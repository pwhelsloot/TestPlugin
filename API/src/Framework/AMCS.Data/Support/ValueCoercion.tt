<#

var types = new[] {
  "char",
  "sbyte",
  "byte",
  "short",
  "ushort",
  "int",
  "uint",
  "long",
  "ulong",
  "float",
  "double",
  "decimal"
};

#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AMCS.Data.Support
{
    public static class ValueCoercion
    {
        public static object Coerce(object value, Type targetType)
        {
            switch (value)
            {
<#
foreach (var from in types) {
#>
                case <#= from #> <#= from #>Value:
<#
    foreach (var to in types) {
#>
                    if (targetType == typeof(<#= to #>))
                        return (<#= to #>)<#= from #>Value;
<#
    }
#>
<#
if (from == "int") {
#>
                    if (targetType.IsEnum)
                    {
                      return (int)intValue;
                    }
<#
}
#>
                    break;
<#
}
#>
            }

            return value;
        }

        public static bool TryCoerce(object value, Type targetType, out object result)
        {
            switch (value)
            {
<#
foreach (var from in types) {
#>
                case <#= from #> <#= from #>Value:
<#
    foreach (var to in types) {
#>
                    if (targetType == typeof(<#= to #>))
                    {
                        result = (<#= to #>)<#= from #>Value;
                        return true;
                    }
<#
    }
#>                  
<#
if (from == "int") {
#>
                    if (targetType.IsEnum)
                    {
                      result = (int)intValue;
                      return true;
                    }
<#
}
#>
                    break;
<#
}
#>
            }

            result = null;
            return false;
        }
    }
}
