{
	"data-service-snippet": {
		"prefix": "data-service",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { EnhancedErpApiService } from '@core-module/services/enhanced-erp-api.service';",
			"import { ApiRequest } from '@core-module/models/api/api-request.model';",
			"import { IFilter } from '@core-module/models/api/filters/iFilter';",
			"import { FilterOperation } from '@core-module/models/api/filters/filter-operation.enum';",
			"import { Observable } from 'rxjs';",
			"",
			"@Injectable()",
			"export class ${1}ServiceData {",
			"  constructor(private erpApiService: EnhancedErpApiService) {}",
			"",
			"  getEditorData(${1/(^[a-zA-Z])(.*)/${1:/downcase}$2/}Id: number): Observable<${1}EditorData> {",
			"    const apiRequest: ApiRequest = new ApiRequest();",
			"    apiRequest.urlResourcePath = ['${2}/${1}EditorDatas'];",
			"    const filters: IFilter[] = [];",
			"    if (${1/(^[a-zA-Z])(.*)/${1:/downcase}$2/}Id) {",
			"      filters.push({",
			"        filterOperation: FilterOperation.Equal,",
			"        name: '${1}Id',",
			"        value: ${1/(^[a-zA-Z])(.*)/${1:/downcase}$2/}Id",
			"      });",
			"    }",
			"    apiRequest.filters = filters;",
			"    return this.erpApiService.get<${1}EditorData>(apiRequest, ${1}EditorData);",
			"  }",
			"",
			"  save(dataModel: ${1}, successMessage: string): Observable<number> {",
			"    const apiRequest: ApiRequest = new ApiRequest();",
			"    apiRequest.urlResourcePath = ['${2}/${1}s'];",
			"    return this.erpApiService.save<${1}>(apiRequest, dataModel, ${1}, successMessage);",
			"  }",
			"}",
			""
		],
		"description": "Creates a basic data service"
	},
	"business-service-snippet": {
		"prefix": "business-service",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { BaseService } from '@core-module/services/base.service';",
			"import { Observable, ReplaySubject, Subject } from 'rxjs';",
			"import { takeUntil, switchMap } from 'rxjs/operators';",
			"",
			"@Injectable()",
			"export class ${1}Service extends BaseService {",
			"  ",
			"  editorData$: Observable<${1}EditorData>;",
			"",
			"  constructor(private dataService: ${1}ServiceData) {",
			"   super();",
			"   this.setUpEditorDataStream();",
			" }",
			"",
			"  private editorData = new ReplaySubject<${1}EditorData>(1);",
			"  private editorDataRequestSubject = new Subject<number>();",
			"",
			"  requestEditorData(${1/(^[a-zA-Z])(.*)/${1:/downcase}$2/}Id: number) {",
			"     this.editorDataRequestSubject.next(${1/(^[a-zA-Z])(.*)/${1:/downcase}$2/}Id);",
			"  }",
			"  ",
			"  save(dataModel: ${1}, successMessage: string): Observable<number> {",
			"     return this.dataService.save(dataModel, successMessage);",
			"  }",
			"",
			"   private setUpEditorDataStream() {",
			"     this.editorData$ = this.editorData.asObservable();",
			"",
			"       this.editorDataRequestSubject.pipe(",
			"            takeUntil(this.unsubscribe),",
			"            switchMap((${1/(^[a-zA-Z])(.*)/${1:/downcase}$2/}Id: number) => {",
			"                return this.dataService.getEditorData(${1/(^[a-zA-Z])(.*)/${1:/downcase}$2/}Id);",
			"            })",
			"        ).subscribe((editorData: ${1}EditorData) => {",
			"            this.editorData.next(editorData);",
			"        });",
			"   }",
			"}",
			""
		],
		"description": "Creates a basic business service"
	},
	"editor-data-snippet": {
		"prefix": "editor-data",
		"body": [
			"import { amcsJsonObject, ApiBaseModel, amcsJsonMember } from '@core-module/models/api/api-base.model';",
			"",
			"@amcsJsonObject()",
			"export class ${1}EditorData extends ApiBaseModel {",
			"",
			"    @amcsJsonMember('DataModel')",
			"    dataModel: ${1};",
			"}",
			""
		],
		"description": "Creates a basic editor data"
	},
	"property-snippet": {
		"prefix": "d-prop",
		"body": [
			"@amcsJsonMember('${1/(^[a-zA-Z])(.*)/${1:/upcase}$2/}')",
			"${1}: ${2};"
		],
		"description": "Creates an property for a data model"
	},
	"array-property-snippet": {
		"prefix": "d-aprop",
		"body": [
			"@amcsJsonArrayMember('${1/(^[a-zA-Z])(.*)/${1:/upcase}$2/}s', ${2})",
			"${1}s: ${2}[];"
		],
		"description": "Creates an array property for a data model"
	},
	"date-property-snippet": {
		"prefix": "d-dprop",
		"body": [
			"@amcsJsonMember('${1/(^[a-zA-Z])(.*)/${1:/upcase}$2/}', true)",
			"${1}: Date;"
		],
		"description": "Creates a date property for a data model"
	},
	"zoned-date-property-snippet": {
		"prefix": "d-zdprop",
		"body": [
			"@amcsJsonZonedDateMember('${1/(^[a-zA-Z])(.*)/${1:/upcase}$2/}')",
			"${1}: Moment;"
		],
		"description": "Creates a zone date property for a data model"
	},
	"data-model-snippet": {
		"prefix": "data-model",
		"body": [
			"import { amcsJsonObject, ApiBaseModel, amcsJsonMember } from '@core-module/models/api/api-base.model';",
			"",
			"@amcsJsonObject()",
			"export class ${1} extends ApiBaseModel {",
			"",
			"    @amcsJsonMember('${1}Id')",
			"    ${1/(^[a-zA-Z])(.*)/${1:/downcase}$2/}Id: number;",
			"}",
			""
		],
		"description": "Creates a data model"
	},
	"lookup-model-snippet": {
		"prefix": "lookup-model",
		"body": [
			"import { ILookupItem } from '@core-module/models/lookups/lookup-item.interface';",
			"import { amcsJsonObject, ApiBaseModel, amcsJsonMember } from '@core-module/models/api/api-base.model';",
			"",
			"@amcsJsonObject()",
			"export class ${1}Lookup extends ApiBaseModel implements ILookupItem {",
			"",
			"    @amcsJsonMember('${1}Id')",
			"    id: number;",
			"",
			"    @amcsJsonMember('Description')",
			"    description: string;",
			"",
			"    @amcsJsonMember('GUID')",
			"    guid: string;",
			"}",
			""
		],
		"description": "Creates a lookup model"
	},
	"form-model-snippet": {
		"prefix": "form-model",
		"body": [
			"import { FormControl } from '@angular/forms';",
			"import { BaseForm } from '@shared-module/forms/base-form.model';",
			"",
			"export class ${1}Form extends BaseForm<${1}, ${1}Form> {",
			"",
			"    id: FormControl;",
			"",
			"    buildForm(dataModel: ${1}, extraParams: any[]): ${1}Form {",
			"        const form = new ${1}Form();",
			"        form.id = new FormControl(dataModel.${1/(^[a-zA-Z])(.*)/${1:/downcase}$2/}Id);",
			"        return form;",
			"    }",
			"",
			"    parseForm(typedForm: ${1}Form, extraParams: any[]): ${1} {",
			"        const dataModel = new ${1}();",
			"        dataModel.${1/(^[a-zA-Z])(.*)/${1:/downcase}$2/}Id = typedForm.id.value;",
			"        return dataModel;",
			"    }",
			"}",
			""
		],
		"description": "Creates a form model"
	},
	"form-service-snippet": {
		"prefix": "form-service",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { BaseService } from '@core-module/services/base.service';",
			"import { FormBuilder } from '@angular/forms';",
			"import { PreviousRouteService } from '@core-module/services/previous-route.service';",
			"import { ActivatedRoute, Params } from '@angular/router';",
			"import { takeUntil, take, switchMap } from 'rxjs/operators';",
			"import { AmcsFormBuilder } from '@shared-module/forms/amcs-form-builder.model';",
			"import { isTruthy } from '@core-module/helpers/is-truthy.function';",
			"",
			"@Injectable()",
			"export class ${1}FormService extends BaseService {",
			"",
			"    static providers = [${1}FormService, ${1}Service, ${1}ServiceData];",
			"",
			"    loading = true;",
			"    form: ${1}Form = null;",
			"    editorData: ${1}EditorData = null;",
			"",
			"    constructor(",
			"        private formBuilder: FormBuilder,",
			"        private businessService: ${1}Service,",
			"        private translationsService: ${2}TranslationsService,",
			"        private previousRouteService: PreviousRouteService,",
			"        private route: ActivatedRoute,",
			"    ) {",
			"        super();",
			"        this.requestEditorData();",
			"    }",
			"",
			"    requestEditorData() {",
			"        this.businessService.editorData$.pipe(takeUntil(this.unsubscribe))",
			"          .subscribe((editorData: ${1}EditorData) => {",
			"            this.editorData = editorData;",
			"            this.buildForm();",
			"            this.loading = false;",
			"        });",
			"",
			"	  this.route.params.pipe(take(1)).subscribe((params: Params) => {",
			"            let id: number = +params['id'];",
			"            if (isTruthy(id)) {",
			"                id = null;",
			"            }",
			"            this.businessService.requestEditorData(id);",
			"        });",
			"    }",
			"",
			"    save() {",
			"        if (this.form.checkIfValid()) {",
			"            this.translationsService.translations.pipe(take(1),",
			"            switchMap((translations: string[]) => {",
			"                return this.businessService.save(AmcsFormBuilder.parseForm(this.form, ${1}Form), translations['${2/(^[a-zA-Z])(.*)/${1:/downcase}$2/}.${1/(^[a-zA-Z])(.*)/${1:/downcase}$2/}.saved']);",
			"            })).subscribe((id: number) => {",
			"              if (id !== null) {",
			"                this.return();",
			"              }});",
			"        }",
			"    }",
			"",
			"    return() {",
			"      this.previousRouteService.navigationToPreviousUrl(['../' + ${2}ModuleAppRoutes.returnScreen], { relativeTo: this.route });",
			"    }",
			"",
			"    private buildForm() {",
			"        this.form = AmcsFormBuilder.buildForm(this.formBuilder, this.editorData.dataModel, ${1}Form, this.formBuilder);",
			"    }",
			"}",
			""
		],
		"description": "Creates a basic form service"
	},
	"translation-snippet": {
		"prefix": "translation",
		"body": [
			"translationArray['${1}'] = this.translateService.instant('${1}');"
		],
		"description": "Creates a translation"
	}
}